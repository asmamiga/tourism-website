"use client"

import { useState, useEffect } from "react"
import { Link as RouterLink } from "react-router-dom"
import {
  Box,
  Container,
  Heading,
  Text,
  SimpleGrid,
  Flex,
  Input,
  Select,
  Button,
  Badge,
  Image,
  VStack,
  Icon,
  useColorModeValue,
  Spinner,
  Alert,
  AlertIcon,
  InputGroup,
  InputLeftElement,
  Tag,
  AspectRatio,
  IconButton,
  useBreakpointValue,
  HStack,
} from "@chakra-ui/react"
import { FaSearch, FaStar, FaHeart, FaRegHeart, FaShare, FaFilter, FaTimes } from "react-icons/fa"
import { FiChevronRight, FiMapPin } from "react-icons/fi"
import { motion, AnimatePresence } from "framer-motion"

// Helper function to get random attraction image
const getRandomMoroccoAttraction = () => {
  const attractionImages = [
    "1595991209486-01c05fa9e812?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
    "1539072692047-3bd38673d8ce?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
    "1548240693-c7d69e8c2583?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
  ]
  const randomIndex = Math.floor(Math.random() * attractionImages.length)
  return attractionImages[randomIndex]
}

// Floating particles component
const FloatingParticles = () => {
  return (
    <Box position="absolute" top={0} left={0} right={0} bottom={0} overflow="hidden" pointerEvents="none">
      {[...Array(20)].map((_, i) => (
        <motion.div
          key={i}
          style={{
            position: "absolute",
            width: Math.random() * 4 + 2,
            height: Math.random() * 4 + 2,
            backgroundColor: "rgba(255, 255, 255, 0.1)",
            borderRadius: "50%",
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            y: [0, -30, 0],
            x: [0, Math.random() * 20 - 10, 0],
            opacity: [0.3, 0.8, 0.3],
          }}
          transition={{
            duration: Math.random() * 3 + 2,
            repeat: Number.POSITIVE_INFINITY,
            ease: "easeInOut",
          }}
        />
      ))}
    </Box>
  )
}

// Helper function to get attraction images based on type
const getAttractionImageByType = (type) => {
  const typeImages = {
    historical: "1557680510-5b4d0f23d5b5?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
    cultural: "1486911278254-a96cdee8f61a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
    natural: "1565353938851-20361937fcf2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGV1fDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
    beach: "1555400038-63f5eb0cb97a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
    garden: "1528820810856-ec912ff49071?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
    market: "1550452333-48cf320bbcb4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80",
    mosque: "1539980184962-811164d3bd55?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1474&q=80",
    palace: "1582376352720-84de28742c18?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
    desert: "1469854523086-cc02fe5d8800?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1421&q=80",
    mountain: "1486771586447-de892eecbb6e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1374&q=80",
  }
  return typeImages[type.toLowerCase()] || getRandomMoroccoAttraction()
}

const MotionBox = motion(Box)

const AttractionCard = ({ attraction, onFavoriteToggle, isFavorite }) => {
  const cardBg = useColorModeValue("white", "gray.800")
  const borderColor = useColorModeValue("gray.200", "gray.600")
  const textColor = useColorModeValue("gray.600", "gray.300")
  const titleColor = useColorModeValue("gray.900", "white")
  const tagBg = useColorModeValue("gray.100", "gray.700")
  const tagColor = useColorModeValue("gray.800", "gray.200")

  return (
    <Box
      bg={cardBg}
      borderWidth="1px"
      borderColor={borderColor}
      borderRadius="lg"
      overflow="hidden"
      boxShadow="sm"
      transition="all 0.3s"
      _hover={{
        transform: "translateY(-4px)",
        boxShadow: "lg",
      }}
      height="100%"
      display="flex"
      flexDirection="column"
      position="relative"
    >
      <Box position="relative" h="240px" overflow="hidden">
        <AspectRatio ratio={16 / 9} w="100%" h="100%">
          <motion.div
            whileHover={{ scale: 1.1 }}
            transition={{ duration: 0.4 }}
            style={{ width: "100%", height: "100%" }}
          >
            <Image
              src={
                attraction.photos && attraction.photos.length > 0
                  ? `https://images.unsplash.com/photo-${getAttractionImageByType(attraction.type || "cultural")}`
                  : `https://images.unsplash.com/photo-${getRandomMoroccoAttraction()}`
              }
              alt={attraction.name}
              objectFit="cover"
              w="100%"
              h="100%"
              fallbackSrc="https://images.unsplash.com/photo-1539020140153-e8c237425f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80"
            />
          </motion.div>
        </AspectRatio>

        <Box
          position="absolute"
          top={0}
          left={0}
          right={0}
          bottom={0}
          bgGradient="linear(to-t, blackAlpha.800, transparent 50%)"
        />

        {attraction.is_featured && (
          <motion.div
            initial={{ scale: 0, rotate: -180 }}
            animate={{ scale: 1, rotate: 0 }}
            transition={{ delay: 0.2, type: "spring", stiffness: 200 }}
          >
            <Badge
              position="absolute"
              top={4}
              right={4}
              bg="linear-gradient(135deg, #667eea 0%, #764ba2 100%)"
              color="white"
              px={3}
              py={1}
              borderRadius="full"
              fontSize="xs"
              fontWeight="bold"
              textTransform="uppercase"
              letterSpacing="wider"
              boxShadow="0 4px 15px rgba(102, 126, 234, 0.4)"
            >
              Featured
            </Badge>
          </motion.div>
        )}

        <IconButton
          aria-label={isFavorite ? "Remove from favorites" : "Add to favorites"}
          icon={isFavorite ? <FaHeart /> : <FaRegHeart />}
          position="absolute"
          top={4}
          left={4}
          color={isFavorite ? "red.400" : "white"}
          bg="blackAlpha.500"
          _hover={{
            bg: "blackAlpha.600",
            transform: "scale(1.1)",
          }}
          _active={{
            bg: "blackAlpha.700",
          }}
          onClick={(e) => {
            e.preventDefault()
            e.stopPropagation()
            onFavoriteToggle(attraction.id)
          }}
          size="md"
          borderRadius="full"
          boxShadow="md"
          transition="all 0.2s"
        />
      </Box>

      <VStack p={6} spacing={3} align="start" flex={1}>
        <HStack spacing={2} flexWrap="wrap">
          {attraction.tags &&
            attraction.tags.slice(0, 2).map((tag, index) => (
              <Tag
                key={index}
                size="sm"
                bg={tagBg}
                color={tagColor}
                borderRadius="full"
                px={3}
                py={1}
                fontSize="xs"
                fontWeight="medium"
              >
                {tag}
              </Tag>
            ))}
        </HStack>

        <Heading as="h3" size="md" color={titleColor} noOfLines={2}>
          {attraction.name}
        </Heading>

        <Text color={textColor} noOfLines={3} fontSize="sm">
          {attraction.description}
        </Text>

        <Flex w="100%" justify="space-between" align="center" mt="auto">
          <HStack spacing={1}>
            <Icon as={FaStar} color="yellow.400" />
            <Text fontSize="sm" color={textColor}>
              {attraction.rating || "4.5"}
              <Text as="span" color="gray.500" fontSize="xs">
                /5
              </Text>
            </Text>
          </HStack>

          <HStack spacing={2} color={textColor}>
            <Icon as={FiMapPin} />
            <Text fontSize="sm">{attraction.location || "Morocco"}</Text>
          </HStack>
        </Flex>
      </VStack>
    </Box>
  )
}

const AttractionsPage = () => {
  // Color mode values
  const bgColor = useColorModeValue("gray.50", "gray.900")
  const cardBg = useColorModeValue("white", "gray.800")
  const inputBg = useColorModeValue("white", "gray.700")
  const borderColor = useColorModeValue("gray.200", "gray.700")
  const textColor = useColorModeValue("gray.600", "gray.300")
  const headingColor = useColorModeValue("gray.800", "white")
  const tagBg = useColorModeValue("blue.50", "blue.900")
  const tagColor = useColorModeValue("blue.700", "blue.100")
  const loadingTextColor = useColorModeValue("gray.600", "gray.400")

  // State
  const [attractions, setAttractions] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [selectedCategory, setSelectedCategory] = useState("all")
  const [selectedLocation, setSelectedLocation] = useState("all")
  const [showFilters, setShowFilters] = useState(false)
  const [favorites, setFavorites] = useState(() => {
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem("favoriteAttractions")
      return saved ? JSON.parse(saved) : []
    }
    return []
  })

  // Fetch attractions
  useEffect(() => {
    const fetchAttractions = async () => {
      try {
        setLoading(true)
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000))
        // Mock data
        const mockAttractions = [
          {
            id: 1,
            name: "Hassan II Mosque",
            description: "Iconic mosque with a towering minaret, partially over the Atlantic Ocean.",
            type: "mosque",
            location: "Casablanca",
            rating: 4.8,
            is_featured: true,
            tags: ["Religious", "Architecture"],
            photos: []
          },
          // Add more mock attractions as needed
        ]
        setAttractions(mockAttractions)
      } catch (err) {
        setError("Failed to load attractions. Please try again later.")
        console.error(err)
      } finally {
        setLoading(false)
      }
    }

    fetchAttractions()
  }, [])

  // Save favorites to localStorage
  useEffect(() => {
    if (typeof window !== 'undefined') {
      localStorage.setItem("favoriteAttractions", JSON.stringify(favorites))
    }
  }, [favorites])

  // Toggle favorite status
  const toggleFavorite = (attractionId) => {
    setFavorites(prev =>
      prev.includes(attractionId)
        ? prev.filter(id => id !== attractionId)
        : [...prev, attractionId]
    )
  }

  // Filter attractions
  const filteredAttractions = attractions.filter(attraction => {
    const matchesSearch = attraction.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (attraction.description && attraction.description.toLowerCase().includes(searchTerm.toLowerCase()))
    
    const matchesCategory = selectedCategory === "all" || 
      (attraction.type && attraction.type.toLowerCase() === selectedCategory.toLowerCase())
    
    const matchesLocation = selectedLocation === "all" || 
      (attraction.location && attraction.location.toLowerCase() === selectedLocation.toLowerCase())
    
    return matchesSearch && matchesCategory && matchesLocation
  })

  // Loading state
  if (loading) {
    return (
      <Container maxW="container.xl" py={12}>
        <Flex justify="center" align="center" minH="50vh">
          <VStack spacing={4}>
            <Spinner size="xl" />
            <Text color={loadingTextColor}>Loading attractions...</Text>
          </VStack>
        </Flex>
      </Container>
    )
  }

  // Error state
  if (error) {
    return (
      <Container maxW="container.xl" py={12}>
        <Alert status="error" borderRadius="md">
          <AlertIcon />
          {error}
        </Alert>
      </Container>
    )
  }

  return (
    <Box bg={bgColor} minH="100vh" position="relative" overflowX="hidden">
      <FloatingParticles />
      
      <Container maxW="container.xl" py={12} position="relative">
        <VStack spacing={8} align="stretch">
          {/* Header */}
          <VStack spacing={4} textAlign="center">
            <Heading as="h1" size="2xl" color={headingColor} fontWeight="bold">
              Discover Morocco's Attractions
            </Heading>
            <Text fontSize="lg" color={textColor} maxW="2xl">
              Explore the most beautiful and fascinating places in Morocco
            </Text>
          </VStack>

          {/* Search and Filters */}
          <VStack spacing={4} align="stretch">
            <Flex direction={{ base: "column", md: "row" }} gap={4}>
              <InputGroup flex={1}>
                <InputLeftElement pointerEvents="none">
                  <Icon as={FaSearch} color="gray.400" />
                </InputLeftElement>
                <Input
                  placeholder="Search attractions..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  bg={inputBg}
                  borderColor={borderColor}
                  _hover={{ borderColor: "gray.300" }}
                  _focus={{
                    borderColor: "blue.500",
                    boxShadow: "0 0 0 1px var(--chakra-colors-blue-500)",
                  }}
                />
              </InputGroup>
              
              <Button
                leftIcon={<Icon as={showFilters ? FaTimes : FaFilter} />}
                onClick={() => setShowFilters(!showFilters)}
                variant="outline"
                borderColor={borderColor}
                _hover={{
                  bg: useColorModeValue("gray.100", "gray.700"),
                }}
              >
                {showFilters ? "Hide Filters" : "Filters"}
              </Button>
            </Flex>

            {showFilters && (
              <Box
                p={4}
                bg={cardBg}
                borderRadius="lg"
                borderWidth="1px"
                borderColor={borderColor}
                boxShadow="sm"
              >
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={4}>
                  <Box>
                    <Text fontSize="sm" fontWeight="medium" mb={2} color={textColor}>
                      Category
                    </Text>
                    <Select
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      bg={inputBg}
                      borderColor={borderColor}
                      _hover={{ borderColor: "gray.300" }}
                    >
                      <option value="all">All Categories</option>
                      <option value="historical">Historical</option>
                      <option value="cultural">Cultural</option>
                      <option value="natural">Natural</option>
                      <option value="beach">Beach</option>
                    </Select>
                  </Box>
                  <Box>
                    <Text fontSize="sm" fontWeight="medium" mb={2} color={textColor}>
                      Location
                    </Text>
                    <Select
                      value={selectedLocation}
                      onChange={(e) => setSelectedLocation(e.target.value)}
                      bg={inputBg}
                      borderColor={borderColor}
                      _hover={{ borderColor: "gray.300" }}
                    >
                      <option value="all">All Locations</option>
                      <option value="marrakech">Marrakech</option>
                      <option value="casablanca">Casablanca</option>
                      <option value="fes">Fes</option>
                      <option value="chefchaouen">Chefchaouen</option>
                      <option value="sahara">Sahara Desert</option>
                    </Select>
                  </Box>
                </SimpleGrid>
              </Box>
            )}
          </VStack>

          {/* Results */}
          <Box>
            <Flex justify="space-between" align="center" mb={6}>
              <Heading as="h2" size="lg" color={headingColor}>
                {filteredAttractions.length} {filteredAttractions.length === 1 ? "Attraction" : "Attractions"} Found
              </Heading>
              <Select
                placeholder="Sort by"
                maxW="200px"
                bg={inputBg}
                borderColor={borderColor}
                _hover={{ borderColor: "gray.300" }}
              >
                <option value="popular">Most Popular</option>
                <option value="rating">Highest Rated</option>
                <option value="name">Name (A-Z)</option>
              </Select>
            </Flex>

            {filteredAttractions.length === 0 ? (
              <Box textAlign="center" py={12}>
                <Text fontSize="lg" color={textColor}>
                  No attractions found. Try adjusting your search or filters.
                </Text>
              </Box>
            ) : (
              <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
                {filteredAttractions.map((attraction) => (
                  <Link
                    key={attraction.id}
                    as={RouterLink}
                    to={`/attractions/${attraction.id}`}
                    _hover={{ textDecoration: "none" }}
                  >
                    <AttractionCard
                      attraction={attraction}
                      onFavoriteToggle={toggleFavorite}
                      isFavorite={favorites.includes(attraction.id)}
                    />
                  </Link>
                ))}
              </SimpleGrid>
            )}
          </Box>
        </VStack>
      </Container>
    </Box>
  )
}

export default AttractionsPage
